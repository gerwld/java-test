package Lesson29Polymorphism;

public class Test {
    public static void main(String[] args) {
        Animal animal = new Dog();
        Dog dog = new Dog();

        // переменная animal типа Animal не имеет доступа к методам класса Dog
        // animal.bark();

        dog.bark();

        // метод eat() переопределен в Dog и будет вызван он, не смотря на то что переменная типа Animal.
        // это и есть полиморфизм. вызывается метод из реального типа объекта, а не из типа переменной
        //--// тип переменной — как каркас (вайфрейм), позволяющий доступ только к методам, известным этому типу
        //--// Но объект сам остаётся Dog, и при вызове override-методов срабатывает реализация из Dog
        animal.eat();


        // тоесть. полиморфизм это механизм в OOП, при котором один и тот же метод может иметь много форм,
        // вести себя по разному, в зависимости от того к какому реальному типу принадлежит обьект, ссылающийся на него.
        // а не от типа переменной, ссылающейся на этот обьект.
        //
        // вроде понял.

    }
}
